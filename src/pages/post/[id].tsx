import { type NextPage } from "next";
import Head from "next/head";

import type { GetStaticPaths, GetStaticProps } from "next/types";
import { api } from "~/utils/api";
import Image from "next/image";
import { LoadingPage } from "~/components/loading";
import { generateSSGHelper } from "~/server/helpers/SSGHelper";
import { PostView } from "~/components/PostView";

const SinglePostPage: NextPage<{ id: string }> = ({ id }) => {
  const { data } = api.post.getById.useQuery({
    id,
  });

  if (!data) return <div>404</div>;

  return (
    <>
      <Head>
        <title>{`${data.post.content} - @${data.author.username}`}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <PostView {...data} />
    </>
  );
};

export default SinglePostPage;

//prefetch and dehydrate user data on server side
export const getStaticProps: GetStaticProps = async (context) => {
  const id = context.params?.id;

  if (typeof id !== "string") throw new Error("no ID");

  // console.log("**************************************", typeof id);

  await generateSSGHelper().post.getById.prefetch({ id });

  return {
    props: {
      trpcState: generateSSGHelper().dehydrate(),
      id,
    },
  };
};

export const getStaticPaths: GetStaticPaths = () => {
  return {
    paths: [],
    fallback: "blocking",
  };
};
